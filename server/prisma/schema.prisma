generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id               String          @id @default(uuid())
  guid             String          @unique
  imageUrl         String?
  name             String
  gender           Gender
  isForeignStudent Boolean
  displayLanguage  DisplayLanguage
  grade            Grade
  hobby            String
  introduction     String
  divisionId       String
  division         Division       @relation(fields: [divisionId], references: [id])
  campusId         String
  campus           Campus         @relation(fields: [campusId], references: [id])

  motherLanguageId  String
  motherLanguage    Language               @relation(fields: [motherLanguageId], references: [id])
  fluentLanguages   FluentLanguageOnUser[]
  learningLanguages LearningLanguageOnUser[]

  favoriteUsers    FavoriteOnUser[] @relation("FavoriteUsers")
  blockedUsers     BlockOnUser[]    @relation("BlockedUsers")
  favoriteBy       FavoriteOnUser[] @relation("FavoriteByUser")
  blockedBy        BlockOnUser[]    @relation("BlockedByUser")
  sentMessages     Message[]        @relation("SentMessages")
  receivedMessages Message[]        @relation("ReceivedMessages")
}

model Division {
  id           String     @id @default(uuid(7))
  name         String     @unique
  universityId String
  university   University @relation(fields: [universityId], references: [id])
  users        User[]
}

model Campus {
  id           String     @id @default(uuid(7))
  name         String     @unique
  universityId String
  university   University @relation(fields: [universityId], references: [id])
  users        User[]
}

model University {
  id       String     @id @default(uuid(7))
  name     String     @unique
  division Division[]
  campus   Campus[]
}

model FavoriteOnUser {
  myId       String
  favoriteId String
  user       User   @relation("FavoriteByUser", fields: [myId], references: [id], onDelete: Cascade)
  favorite   User   @relation("FavoriteUsers", fields: [favoriteId], references: [id], onDelete: Cascade)

  @@id([myId, favoriteId])
}

model BlockOnUser {
  myId      String
  blockedId String
  user      User   @relation("BlockedByUser", fields: [myId], references: [id], onDelete: Cascade)
  blocked   User   @relation("BlockedUsers", fields: [blockedId], references: [id], onDelete: Cascade)

  @@id([myId, blockedId])
}

model Language {
  id            String                   @id @default(uuid())
  name          String                   @unique()
  fluentUsers   FluentLanguageOnUser[]
  learningUsers LearningLanguageOnUser[]
  User          User[]
}

model FluentLanguageOnUser {
  userId     String
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  languageId String
  language   Language @relation(fields: [languageId], references: [id], onDelete: Cascade)

  @@id([userId, languageId])
}

model LearningLanguageOnUser {
  userId     String
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  languageId String
  language   Language @relation(fields: [languageId], references: [id], onDelete: Cascade)

  @@id([userId, languageId])
}

model Message {
  id         String   @id @default(uuid(7))
  isPhoto    Boolean  @default(false)
  content    String
  createdAt  DateTime @default(now())
  isEdited   Boolean  @default(false)
  senderId   String
  sender     User     @relation("SentMessages", fields: [senderId], references: [id])
  receiverId String
  receiver   User     @relation("ReceivedMessages", fields: [receiverId], references: [id])
}

enum Gender {
  male
  female
  other
}

enum DisplayLanguage {
  japanese
  english
}

enum Grade {
  B1
  B2
  B3
  B4
  M1
  M2
  D1
  D2
  D3
}

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id               String   @id @default(uuid())
  guid             String   @unique
  imageUrl         String?
  name             String
  gender           Gender
  isForeignStudent Boolean
  grade            Grade
  hobby            String
  introduction     String
  // universityId     String
  // university       University @relation(fields: [universityId], references: [university])
  divisionId       String
  division         Division @relation(fields: [divisionId], references: [id])
  campusId         String
  campus           Campus   @relation(fields: [campusId], references: [id])

  motherLanguageId  String
  motherLanguage    Language                 @relation(fields: [motherLanguageId], references: [id])
  fluentLanguages   FluentLanguageOnUser[]
  learningLanguages LearningLanguageOnUser[]

  marking  Marker[] @relation("Actor")
  markedAs Marker[] @relation("Target")

  joinedRooms Belongs[]
  messages    Message[]
}

model Marker {
  kind     MarkerKind
  actorId  String
  actor    User       @relation("Actor", fields: [actorId], references: [id], onDelete: Cascade)
  targetId String
  target   User       @relation("Target", fields: [targetId], references: [id], onDelete: Cascade)

  @@id([actorId, targetId])
}

enum MarkerKind {
  favorite
  blocked
}

model Message {
  id        String   @id @default(uuid(7))
  isPhoto   Boolean  @default(false)
  content   String
  createdAt DateTime @default(now())
  isEdited  Boolean  @default(false)
  senderId  String
  sender    User     @relation(fields: [senderId], references: [id], onDelete: Cascade)
  roomId    String
  room      Room     @relation(fields: [roomId], references: [id], onDelete: Cascade)
}

model Room {
  id       String    @id @default(uuid(7))
  name     String? // should default to list of member names if not set
  imageUrl String?
  members  Belongs[]
  messages Message[]
}

model Belongs {
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  roomId String
  room   Room   @relation(fields: [roomId], references: [id], onDelete: Cascade)

  @@id([userId, roomId])
}

model Division {
  id           String     @id @default(uuid(7))
  name         String     @unique
  universityId String
  university   University @relation(fields: [universityId], references: [id])
  users        User[]
}

model Campus {
  id           String     @id @default(uuid(7))
  name         String     @unique
  universityId String
  university   University @relation(fields: [universityId], references: [id])
  users        User[]
}

model University {
  id       String     @id @default(uuid(7))
  name     String     @unique
  division Division[]
  campus   Campus[]
}

model Language {
  id            String                   @id @default(uuid())
  jaName        String                   @unique()
  enName        String                   @unique()
  fluentUsers   FluentLanguageOnUser[]
  learningUsers LearningLanguageOnUser[]
  User          User[]
}

model FluentLanguageOnUser {
  userId     String
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  languageId String
  language   Language @relation(fields: [languageId], references: [id], onDelete: Cascade)

  @@id([userId, languageId])
}

model LearningLanguageOnUser {
  userId     String
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  languageId String
  language   Language @relation(fields: [languageId], references: [id], onDelete: Cascade)

  @@id([userId, languageId])
}

enum Gender {
  male
  female
  other
}

enum Grade {
  B1
  B2
  B3
  B4
  M1
  M2
  D1
  D2
  D3
}
